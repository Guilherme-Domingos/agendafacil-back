
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model PlatformAdmin {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
}

model Plan {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  features    Json
  tenants     Tenant[]
  createdAt   DateTime @default(now())
}

model Tenant {
  id              String          @id @default(uuid())
  name            String
  ownerEmail      String          @unique
  planId          String
  plan            Plan            @relation(fields: [planId], references: [id])
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  owners          Owner[]
  userTenants     UserTenant[]
  services        Service[]
  staff           Staff[]
  appointments    Appointment[]
  availableSlots  AvailableSlot[]
}


model Owner {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String?
  oauthType String?
  oauthId   String?  @unique
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  createdAt DateTime @default(now())
}

model Service {
  id           String        @id @default(uuid())
  name         String
  description  String?
  duration     Int
  price        Float
  tenantId     String
  tenant       Tenant        @relation(fields: [tenantId], references: [id])
  appointments Appointment[]
  createdAt    DateTime      @default(now())
}

model Staff {
  id             String          @id @default(uuid())
  name           String
  role           String
  email          String          @unique
  password       String?
  tenantId       String
  tenant         Tenant          @relation(fields: [tenantId], references: [id])
  appointments   Appointment[]
  availableSlots AvailableSlot[]
  createdAt      DateTime        @default(now())
}


model Appointment {
  id          String   @id @default(uuid())
  userId      String
  serviceId   String
  staffId     String
  scheduledAt DateTime
  status      String   @default("pending")
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  service     Service  @relation(fields: [serviceId], references: [id])
  staff       Staff    @relation(fields: [staffId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AvailableSlot {
  id           String    @id @default(uuid())
  staffId      String
  staff        Staff     @relation(fields: [staffId], references: [id])
  dayOfWeek    Int
  startTime    DateTime
  endTime      DateTime
  isRecurring  Boolean   @default(true)
  specificDate DateTime?
  tenantId     String
  tenant       Tenant    @relation(fields: [tenantId], references: [id])
  createdAt    DateTime  @default(now())
}

model UserTenant {
  id        String   @id @default(uuid())
  userId    String
  tenantId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, tenantId])
  @@map("user_tenant")
}

model User {
  id            String       @id
  name          String       @db.Text
  email         String
  emailVerified Boolean      @default(false)
  image         String?      @db.Text
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt
  role          String?      @db.Text
  banned        Boolean?     @default(false)
  banReason     String?      @db.Text
  banExpires    DateTime?
  userTenants   UserTenant[]
  sessions      Session[]
  accounts      Account[]
  members       Member[]
  invitations   Invitation[]
  appointments  Appointment[]

  @@unique([email])
  @@map("user")
}

model Session {
  id                   String   @id
  expiresAt            DateTime
  token                String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  ipAddress            String?  @db.Text
  userAgent            String?  @db.Text
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy       String?  @db.Text
  activeOrganizationId String?  @db.Text

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String    @db.Text
  providerId            String    @db.Text
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  idToken               String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?   @db.Text
  password              String?   @db.Text
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String   @db.Text
  value      String   @db.Text
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Organization {
  id          String       @id
  name        String       @db.Text
  slug        String
  logo        String?      @db.Text
  createdAt   DateTime
  metadata    String?      @db.Text
  members     Member[]
  invitations Invitation[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String       @db.Text
  createdAt      DateTime

  @@map("member")
}

model Invitation {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String       @db.Text
  role           String?      @db.Text
  status         String       @db.Text
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}
